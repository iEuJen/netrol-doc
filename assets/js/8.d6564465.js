(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{360:function(t,r,e){"use strict";e.r(r);var a=e(42),s=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[t._v("Netrol 是一个用于浏览器端的 AJAX 请求库。\n它采用集中存储的方式，管理项目的服务端接口。")]),t._v(" "),e("h3",{attrs:{id:"特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[t._v("#")]),t._v(" 特性")]),t._v(" "),e("ul",[e("li",[t._v("集中式管理接口")]),t._v(" "),e("li",[t._v("支持 Promise")]),t._v(" "),e("li",[t._v("请求和响应的拦截，并支持对单一接口进行响应拦截")]),t._v(" "),e("li",[t._v("取消请求")]),t._v(" "),e("li",[t._v("针对状态码进行捕获")])]),t._v(" "),e("h3",{attrs:{id:"什么时候使用-netrol"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么时候使用-netrol"}},[t._v("#")]),t._v(" 什么时候使用 Netrol")]),t._v(" "),e("p",[t._v("建议在支持 ES6模块 的单页面应用中使用，因为服务端渲染的多页面应用，一般情况下单个页面需要用到的接口数量并不是很多，这时候使用 Netrol 就会显得过于繁重。")])])}),[],!1,null,null,null);r.default=s.exports}}]);